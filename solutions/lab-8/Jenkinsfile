def tag,altTag

pipeline {
  agent {
    label 'maven'
  }
  stages {
    stage('Build App') {
      steps {
        sh "mvn clean package -s src/main/config/settings.xml"
      }
    }
    stage('Integration Test') {
      steps {
        sh "mvn verify -s src/main/config/settings.xml"
      }
    }
    stage('Build Image') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              openshift.startBuild("cart", "--from-file=target/cart.jar").logs(-f")
            }
          }
        }
      }
    }
    stage('Deploy') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              dc = openshift.selector("dc", "cart")
              dc.rollout().latest()
              timeout(10) {
                  dc.rollout().status()
              }
            }
          }
        }
      }
    }
    stage('Component Test') {
      steps {
        script {
          sh "curl -s -X POST http://cart:8080/api/cart/dummy/666/1"
          sh "curl -s http://cart:8080/api/cart/dummy | grep 'Dummy Product'"
        }
      }
    }
    stage('Promote') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject("prod-XX") {
              def route = openshift.selector("route", "cart").object()
              def backends = []
              backends.add(route.spec.to)
              backends.addAll(route.spec.alternateBackends)
              def svc = backends.find {it.weight == 100}
              tag = svc.name == "cart-green" ? "blue" : "green"
              altTag = svc.name == "cart-green" ? "green" : "blue"

              openshift.tag("dev-XX/cart:latest", "prod-XX/cart:prod-${tag}")
              openshift.selector("dc", "cart-${tag}").rollout().status()
            }
          }
        }
      }
    }

    stage('End-To-End Test') {
      steps {
        script {
          sh "curl -s -X POST http://cart-${tag}.prod-XX.svc:8080/api/cart/dummy/444434/1"
          sh "curl -s http://cart-${tag}.prod-XX.svc:8080/api/cart/dummy | grep 'Pebble Smart Watch'"
        }
      }
    }

    stage('Approve Go Live') {
      steps {
        timeout(time:15, unit:'MINUTES') {
            input message: "Approve Promotion to Prod?", ok: "Promote"
        }
        script {
          openshift.withCluster() {
            openshift.withProject("prod-XX") {
              openshift.set("route-backends", "cart" , "cart-${tag}=100", "cart-${altTag}=0")
            }
          }
        }
      }
    }
  }
}